package Md5Recurse

import java.io.File

import scala.collection.{Map, mutable}

/**
  * Created by Alex on 20-08-2016.
  */
class DirAndFileMap[A] {
  // By using File to represent directory we get equals evaluated relative to local filesystem, not just raw string. That is more stable, but likely to be slower.
  // However our Md5SumInfo.equals is based on raw strings
  // Everything in file should have been generated by this program, so raw string comparison should be enough
  val map: mutable.Map[File, mutable.LinkedHashMap[String, A]] = mutable.LinkedHashMap()
  var doneBuilding = false
  def setDir(dir: String, dirMap: mutable.LinkedHashMap[String, A]) {
    if (doneBuilding) throw new IllegalStateException("done building")
    map += (new File(dir) -> dirMap)
  }
  def getOrCreateDir(dir: File): mutable.LinkedHashMap[String, A] = {
    val old = map.get(dir)
    if (old.isDefined)
      old.get
    else
      new mutable.LinkedHashMap[String, A]
  }
  def getDir(dir: File): Option[Map[String, A]] = {
    map.get(dir)
  }
  def setDoneBuilding() {
    doneBuilding = true
  }
}
